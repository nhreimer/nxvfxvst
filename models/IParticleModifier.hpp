/*
 * Copyright (C) 2025 Nicholas Reimer <nicholas.hans@gmail.com>
 *
 * This file is part of a project licensed under the GNU Affero General Public License v3.0,
 * with an additional non-commercial use restriction.
 *
 * You may redistribute and/or modify this file under the terms of the GNU AGPLv3 as
 * published by the Free Software Foundation, provided that your use is strictly non-commercial.
 *
 * This software is provided "as-is", without any warranty of any kind.
 * See the LICENSE file in the root of the repository for full license terms.
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 */

#pragma once

namespace nx
{
  struct IParticleModifier : public ISerializable< E_ModifierType >
  {
    ~IParticleModifier() override = default;

    virtual void drawMenu() = 0;

    virtual void update( const sf::Time& deltaTime ) = 0;

    virtual bool isActive() const = 0;

    virtual void processMidiEvent( const Midi_t& midiEvent ) = 0;

    /// @param blendMode blend mode for particle layers
    /// @param particles particles generated by IParticleLayout
    /// @param outArtifacts Ownership is handed off. do NOT manage memory. artifacts are ephemeral.
    virtual void modify(
       const sf::BlendMode& blendMode,
       std::deque< IParticle* >& particles,
       std::deque< sf::Drawable* >& outArtifacts ) = 0;
  };
}